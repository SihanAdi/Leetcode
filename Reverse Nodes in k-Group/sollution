/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode new_head = null;
        ListNode ptr = head;
        ListNode ktail = null;
        while (ptr != null){
            int count = 0;
            ptr = head;
            while (count < k && ptr != null){
                ptr = ptr.next;
                count++;
            }
            if (count == k){
                ListNode tmp = rc(head, k);
                if (new_head == null){
                    new_head = tmp;
                }
                if (ktail != null){
                    ktail.next = tmp;
                }
                ktail = head;
                head = ptr;
            }
            
        }
        if (ktail != null){
            ktail.next = head;
        }
        return new_head == null ? head : new_head;
    }
    public ListNode rc(ListNode head, int k){
        ListNode new_head = null;
        ListNode ptr = head;
        while (k > 0){
            ListNode next_node = ptr.next;
            
            ptr.next = new_head;
            new_head = ptr;
            
            ptr = next_node;
            k--;
        }
        return new_head;
    }
}
