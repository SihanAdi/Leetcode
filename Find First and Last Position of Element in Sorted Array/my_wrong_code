class Solution {
    int[] ans = new int[2];
    
    public int[] searchRange(int[] nums, int target) {
        int i = 0;
        int j = nums.length - 1;
        ans[0] = -1;
        ans[1] = -1;
        if (nums.length == 0){
            return ans;
        }
        bs(nums, target, i, j);
        return ans;
        
    }
    public void bs(int[] nums, int target, int i, int j){
        if (i == j){
            if (nums[i] == target){
                ans[0] = ans[0] == -1 ? i : Math.min(ans[0], i);
                ans[1] = Math.max(ans[1], i);
            }
            return;
        }
        int mid = (i + j) / 2;
        if (nums[mid] == target){
            if (mid - 1 >= 0 && nums[mid - 1] == nums[mid]){
                bs(nums, target, i, mid - 1);
            }
            if (mid + 1 <= nums.length - 1 && nums[mid + 1] == nums[mid]){
                bs(nums, target, mid + 1, j);
            }
            if (mid - 1 >= 0 && mid + 1 <= nums.length - 1 && nums[mid + 1] != nums[mid] && nums[mid - 1] != nums[mid]){
                ans[0] = mid;
                ans[1] = mid;
                return;
            }
            ans[0] = ans[0] == -1 ? i : Math.min(ans[0], mid);
            ans[1] = Math.max(ans[1], mid);
        }
        else if (nums[mid] > target){
            if (mid == 0){
                return;
            }else{
                bs(nums, target, i, mid - 1);
            }
            
        }
        else if (nums[mid] < target){
            if (mid == nums.length - 1){
                return;
            }
            else{
                bs(nums, target, mid + 1, j);
            }
        }
    }
}
