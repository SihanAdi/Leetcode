/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        
        while (l1 != null && l2 != null){
            if (l1.val + l2.val >= 10){
                
                l1.val = l1.val + l2.val - 10;
                if (l1.next != null){
                    l1.next.val += 1;
                }
                else if (l2.next != null){
                    l2.next.val += 1;
                }
                else if ((l1.next == null) && (l2.next == null)){
                    ListNode node = new ListNode(1);
                    l1.next = node;
                }
            }else{
                l1.val = l1.val + l2.val;
            }
            l1 = l1.next;
            l2 = l2.next;
            
        }
        while (l1 != null){
            if (l1.val < 10){
                l1.val = l1.val;
            }else{
                l1.val = l1.val % 10;
                if (l1.next != null){
                    l1.next.val += 1;
                }else{
                    ListNode node = new ListNode(1);
                    l1.next = node;
                }
            }
            l1 = l1.next;
        }
        while (l2 != null){
            if (l2.val < 10){
                ListNode node = new ListNode(l2.val);
                l1.next = node;
                
            }else{
                l2.val = l2.val % 10;
                ListNode node = new ListNode(l2.val);
                l1.next = node;
                if (l2.next != null){
                    l2.next.val += 1;
                }else{
                    ListNode node2 = new ListNode(1);
                    l1.next.next = node2;
                }
            }
            l2 = l2.next;
        }
        return l1;
    }
}
