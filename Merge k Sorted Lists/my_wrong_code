/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0){
            return null;
        }
        if (lists.length == 1 && lists[0] == null){
            return null;
        }
        ListNode ans = new ListNode(0);
        
        for (int i = 0; i < lists.length; i++){
            ListNode cur = ans;
            if (cur.next == null){
                cur.next = lists[i];
            }else{
                cur = cur.next;
                while (cur != null && lists[i] != null){
                    if (cur.next != null){
                        if (lists[i].val >= cur.val && lists[i].val < cur.next.val){
                            ListNode tmp = new ListNode(lists[i].val);
                            ListNode node = cur.next;
                            cur.next = tmp;
                            tmp.next = node;
                            lists[i] = lists[i].next;
                            
                        }
                        else if (lists[i].val < cur.val){
                            ListNode tmp = new ListNode(lists[i].val);
                            ans.next = tmp;
                            tmp.next = cur;
                            lists[i] = lists[i].next;
                            cur = ans.next;
                        }
                    }else{
                        if (lists[i].val >= cur.val){
                            cur.next = lists[i];
                            break;
                        }
                        else if (lists[i].val < cur.val){
                            int c = 0;
                            ans.next = lists[i];
                            while (lists[i].next != null){
                                if (lists[i].val < cur.val){
                                    lists[i] = lists[i].next;
                                }else{
                                    ListNode tmp = new ListNode(cur.val);
                                    ListNode node = lists[i];
                                    tmp.next = node;
                                    lists[i - 1].next = tmp;
                                    c = 1;
                                    break;
                                }
                                
                            }
                            if (c == 0 && lists[i].val < cur.val){
                                lists[i].next = cur;
                            }
                            else if (c == 0 && lists[i].val >= cur.val){
                                
                                ListNode node = lists[i];
                                
                                lists[i - 1].next = cur;
                                cur.next = node;
                            }
                            break;
                        }
                    }
                    
                    cur = cur.next;
                }
            }
        }
        return ans.next;
    }
   
}
