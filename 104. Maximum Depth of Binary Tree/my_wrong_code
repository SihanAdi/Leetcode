/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        int max = 0;
        if (root == null){
            return 0;
        }
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            if (stack.peek().right == null && stack.peek().left == null){
                max = Math.max(max, stack.size());
                stack.pop();
                continue;
            }
            if (stack.peek().left != null){
                stack.push(stack.peek().left);
                stack.peek().left = null;
                continue;
            }
            if (stack.peek().right != null && stack.peek().left == null){
                stack.push(stack.peek().right);
                stack.peek().right = null;
                continue;
            }
        }
        return max;
    }
}
