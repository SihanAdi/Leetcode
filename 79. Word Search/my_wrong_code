class Solution {
    boolean ans = false;
    
    public boolean exist(char[][] board, String word) {
        int[][] v = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++){
            for (int j = 0; j< board[0].length; j++){
                
                v[i][j] = 1;
                bc(board, word, i, j, "", v);
                if (ans == true){
                    break;
                }
            }
        }
        return ans;
    }
    public void bc(char[][] board, String word, int i, int j, String tmp, int[][] v){
        if (tmp.length() == word.length()){
            if (word.equals(tmp.toString())){
                ans = true;
                return;
            }else{
                return;
            }
        }
        if (j + 1 < board[0].length && v[i][j + 1] != 1){
            StringBuffer strr = new StringBuffer(tmp);
            strr.append(String.valueOf(board[i][j + 1]));
            bc(board, word, i, j + 1, strr.toString(), v);
        }
        if (j - 1 >= 0 && v[i][j - 1] != 1){
            StringBuffer strl = new StringBuffer(tmp);
            strl.append(String.valueOf(board[i][j - 1]));
            bc(board, word, i, j - 1, strl.toString(), v);
        }
        if (i + 1 < board.length && v[i + 1][j] != 1){
            StringBuffer strd = new StringBuffer(tmp);
            strd.append(String.valueOf(board[i + 1][j]));
            bc(board, word, i + 1, j, strd.toString(), v);
        }
        if (i - 1 >= 0 && v[i +- 1][j] != 1){
            StringBuffer stru = new StringBuffer(tmp);
            stru.append(String.valueOf(board[i - 1][j]));
            bc(board, word, i - 1, j, stru.toString(), v);
        }
    }
}
