class Solution {
    
    public void sortColors(int[] nums) {
        int c0 = 0;
        int c1 = 0;
        int c2 = 0;
        for (int i = 0; i < nums.length; i++){
            if (nums[i] == 0){
                c0++;
            }
            if (nums[i] == 1){
                c1++;
            }
            if (nums[i] == 2){
                c2++;
            }
        }
        for (int i = 0; i < nums.length; i++){
            if (c0 != 0){
                nums[i] = 0;
                c0--;
                continue;
            }
            if (c1 != 0){
                nums[i] = 1;
                c1--;
                continue;
            }
            if (c2 != 0){
                nums[i] = 2;
                c2--;
                continue;
            }
        }
    }
}
Algorithm

Initialise the rightmost boundary of zeros : p0 = 0. During the algorithm execution nums[idx < p0] = 0.

Initialise the leftmost boundary of twos : p2 = n - 1. During the algorithm execution nums[idx > p2] = 2.

Initialise the index of current element to consider : curr = 0.

While curr <= p2 :

If nums[curr] = 0 : swap currth and p0th elements and move both pointers to the right.

If nums[curr] = 2 : swap currth and p2th elements. Move pointer p2 to the left.

If nums[curr] = 1 : move pointer curr to the right.
