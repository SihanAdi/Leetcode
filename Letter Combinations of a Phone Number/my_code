class Solution {
    Map<Character, String> map = Map.of(
        '2', "abc", '3', "def", '4', "ghi", '5', "jkl", 
        '6', "mno", '7', "pqrs", '8', "tuv", '9', "wxyz");
    List<String> ans = new LinkedList<String>();
    public List<String> letterCombinations(String digits) {
        if (digits.length() == 0){
            return new LinkedList<String>();
        }
        String tmp = "";
        rc(digits, 0, tmp);
        return ans;
    }
    public void rc(String digits, int i, String tmp){
        if (i >= digits.length()){
            ans.add(tmp);
            return;
        }
        
        String tmp1 = tmp + map.get(digits.charAt(i)).charAt(0);
        String tmp2 = tmp + map.get(digits.charAt(i)).charAt(1);
        String tmp3 = tmp + map.get(digits.charAt(i)).charAt(2);
        
        i++;
        rc(digits, i, tmp1);
        rc(digits, i, tmp2);
        rc(digits, i, tmp3);
        if (digits.charAt(i - 1) == '7' || digits.charAt(i - 1) == '9'){
            String tmp4 = tmp + map.get(digits.charAt(i - 1)).charAt(3);
            rc(digits, i, tmp4);
        }
    }
}
