class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new LinkedList<List<String>>();
        backtracking(0, ans, new ArrayList<String>(), s);
        return ans;
    }
    public void backtracking(int start, List<List<String>> ans, List<String> tmp, String s){
        if (start >= s.length()){
            ans.add(new ArrayList<String>(tmp));
        }
        for (int end = start; end < s.length(); end++){
            if (check(s, start, end)){
                tmp.add(s.substring(start, end + 1));
                backtracking(end + 1, ans, tmp, s);
                tmp.remove(tmp.size() - 1);
            }
        }
    }
    public boolean check(String s, int start, int end){
        while (start <= end){
            if (s.charAt(start++) != s.charAt(end--)){
                return false;
            }
        }
        return true;
    }
}
