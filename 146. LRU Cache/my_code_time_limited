class LRUCache {
    int capacity = 0;
    HashMap<Integer, Integer> map;
    LinkedList<Integer> list;
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<Integer, Integer>();
        list = new LinkedList<Integer>();
    }
    
    public int get(int key) {
        if (list.contains(key)){
            int i = list.indexOf(key);
            list.remove(i);
            list.addLast(key);
            return map.get(key);
        }else{
            return -1;
        }
    }
    
    public void put(int key, int value) {
        if (list.contains(key)){
            map.replace(key, value);
            int i = list.indexOf(key);
            list.remove(i);
            list.addLast(key);
        }else{
            if (list.size() >= capacity){
                map.remove(list.getFirst());
                list.removeFirst();
                list.addLast(key);
                map.put(key, value);
            }else{
                list.addLast(key);
                map.put(key, value);
            }
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
