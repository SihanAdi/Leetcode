/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        TreeNode node = root;
        List<List<Integer>> ans = new LinkedList<List<Integer>>();
        List<Integer> tmp = new LinkedList<Integer>();
        if (root == null){
            return ans;
        }
       
        
        while (!queue.isEmpty()){
            if (queue.peek() == node){
                
                tmp.add(queue.peek().val);
                ans.add(tmp);
                TreeNode nodet = queue.poll();
                node = nodet.left;
                tmp = new LinkedList<Integer>();
                if (nodet.left != null){
                    tmp.add(nodet.left.val);
                    queue.add(nodet.left);
                }
                if (nodet.right != null){
                    tmp.add(nodet.right.val);
                    queue.add(nodet.right);
                }
                
                
                
                
            }else{
                TreeNode nodet = queue.poll();
                if (nodet.left != null){
                    tmp.add(nodet.left.val);
                    queue.add(nodet.left);
                }
                if (nodet.right != null){
                    tmp.add(nodet.right.val);
                    queue.add(nodet.right);
                }
            }
            
        }
        return ans;
    }
}
